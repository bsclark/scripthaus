# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
export GIT_SSL_NO_VERIFY=true

HISTSIZE=5000
HISTFILESIZE=10000
HISTTIMEFORMAT="%F %T "
HISTIGNORE="history:exit"
HISTCONTROL=ignoreboth:erasedups

#export PS1="[\[\e[33m\]\u\[\e[m\]@\[\e[34m\]\h\[\e[m\] \[\e[32m\]\W\[\e[m\]]\\$ "

#export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
#export PATH="$PATH:/usr/local/opt/go/libexec/bin" # Add path for Go installed via Brew
#export PATH="$PATH:$HOME/gocode/bin"  # add path for gron, installed via 'go get'
export PATH="$PATH:$HOME/.rvm/bin:/usr/local/opt/go/libexec/bin:$HOME/gocode/bin"  # compund export

# AWS CLI autocomplete   http://docs.aws.amazon.com/cli/latest/userguide/cli-command-completion.html
complete -C '/usr/local/bin/aws_completer' aws

# pyenv stuff
export PYENV_ROOT=/usr/local/var/pyenv
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi

# this fixes and issue that came up when I upgraded to 2.7.13 and python had problems finding the correct pip packages.
export PYTHONPATH="/usr/local/var/pyenv/versions/2.7.13/lib/python2.7/site-packages:/usr/local/lib/python2.7/site-packages"

# Vars for GO language
export GOPATH=~/gocode

# For ansible dynamic inventory
export EC2_INI_PATH=/Users/bclark/.aws/ec2.ini
#export ANSIBLE_HOSTS=/Users/bclark/GitWork/ansible-playbooks/inventory/ec2.py

# for git bash prompt
GIT_PROMPT_THEME=Single_line
GIT_PROMPT_START="[\[\e[33m\]\u\[\e[m\]@\[\e[34m\]\h\[\e[m\] \[\e[32m\]\W\[\e[m\]]"
#GIT_PROMPT_END=""

# For ansible dynamic inventory
export EC2_INI_PATH=/Users/bclark/.aws/ec2.ini
#export ANSIBLE_HOSTS=/Users/bclark/GitWork/ansible-playbooks/inventory/ec2.py
export ANSIBLE_HOST_KEY_CHECKING=False

# Functions
function ssht_fn(){ ssh -i ~/.ssh/somekey.pem centos@"$@"; }
function dsrm_fn(){ docker stop "$@";docker rm "$@"; }

# making vimpager the new less
# mac install == brew install vimpager
export PAGER=/usr/local/bin/vimpager
alias less=$PAGER
alias zless=$PAGER

# will determine if there are any valid kerberos tickets and if not, run kinit
#/Users/bclark/bin/need_to_kinit.bash

## User specific aliases and functions
# common commands
alias fab="fab -f ~/fabric/fabfile.py"
alias fabp="fab -f ~/fabric/fabfile.py -P"
alias cdd="cd ~/Downloads"
alias vi=vim
alias ls="ls -G"

alias myip="curl ifconfig.co"

alias cdmy="cd ~/GitPersonal/"
alias cdmys="cd ~/GitPersonal/scripthaus;git pull"
alias cdmyc="cd ~/GitPersonal/compinv;git pull"
alias cdmyd="cd ~/GitPersonal/dochaus;git pull"

alias bkl="bundle exec kitchen list"
alias bkc="bundle exec kitchen converge"
alias bkd="bundle exec kitchen destroy"
alias sshl="ssh vagrant@localhost -p 2222"
alias sshl2="ssh vagrant@localhost -p 2200"
alias asetup1="ansible localhost:2222 -m setup -i ~/brent.inv --extra-vars "ansible_ssh_user=vagrant" -vvvv -k"
alias asetup2="ansible localhost:2200 -m setup -i ~/brent.inv --extra-vars "ansible_ssh_user=vagrant" -vvvv -k"

alias ssh="ssh -K"
alias ssht=ssht_fn;

# Docker 
alias dsrm=dsrm_fn;
alias dps="docker ps -a"
alias dim="docker images"

# EC2
alias sshec2="echo 'ssh -i ~/.ssh/coreos core@<ec2 ip>';echo 'ssh -i ~/.ssh/<somekey>`.pem centos@<ec2 ip>'"

# gron (make json grepable tool)
alias ungron="gron --ungron"

#MAC-isms
alias cleardns="dscacheutil -flushcache; sudo killall -HUP mDNSResponder"

# ssh tunnel example
alias sshtunnel="ssh -f user@personal-server.com -L <localport>:personal-server.com:<remoteport> -N"

# ================
# Not Used / Notes
# ================
# Fedora, Gnome desktop icon location
# sudo vi /usr/local/share/applications/rdesktop.desktop

# ssh key copy stuff
# cat ~/.ssh/id_rsa.pub | ssh user@machine "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
# ssh-copy-id user@machine

#alias vc="rdesktop <ip> -z -T 'VC - <ip>' -d <win domain> -u <user> -g 1024x768 &"

# Ever edit a file as a normal user that is owned by root. This vim command will allow you to overwrite it with using root perms.
# :w !sudo tee %

# example ansible ad-hoc command using dynamic ec2 inventory tags
# export ANSIBLE_HOST_KEY_CHECKING=False;ansible tag_env_dev -i <path to>/ec2.py -u <user> --private-key <location of ssh private key for user> -a "<command>"

## example ansible playbook command using ec2.py and ec2 tags
# ansible-playbook playbook_to_use.yml -vvvv -i ./inventory/ec2.py --private-key </path/to/ssh.pem> --extra-vars "hosts_group=tag_tagname_tagvalue:&tag_tag_name_tag_value"   # assumes hosts_group is the variable used for hosts:
## to limit further you can append
# --limit 192.168.0.110   # IP is what is the search key returned form the ec2.py script.

## SED to determine if the line starts with a certin string and if so, join it with the last line replacing the newline character with a tab character. This is cool!!!!
# EX data file
#-----
#10.200.37.174
#3.10.0-327.36.3.el7.x86_64
#10.200.37.245
#3.10.0-327.36.3.el7.x86_64
#10.200.37.196
#3.10.0-229.20.1.el7.x86_64
#
#sed '$!N;s/\n3.10/      3.10/;P;D' filename.txt
#
# output looks like
#10.200.37.174	3.10.0-327.36.3.el7.x86_64

# https://superuser.com/questions/276533/scp-files-via-intermediate-host
# http://mperdikeas.github.io/networking.html.files/scp-a-file-through-jump-host.html
# A (client) --> B (jumphost) --> C (destination)
# scp -oProxyCommand="ssh -W %h:%p some-middle-server" thefile some-destination-server:destination_file_name_if_any

